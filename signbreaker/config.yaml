# TODO: Some or all of these may be command line parameters in the future

# The width of the square to which sign images will be scaled
sign_width: 200  # Default: 200

# When to stop the program, in the case that not all of the sequential steps are required
final_op: dataset  # Either 'process', 'damage', 'transform', 'manipulate', or 'dataset'

# The number of transformations applied to each damaged sign template
num_transform: 6  # Range: [0,15] | low: [1,5], medium: [6,10], high: [11,15]

# Method of image manipulation: either 'exposure' or 'fade' (not implemented)
man_method: exposure

# The number of damages applied via each method
num_damages: 
  original: 1       # Max 1
  quadrant: 1       # Max 4
  big_hole: 1
  bullet_holes: 1
  graffiti: 2
  bend: 2
  # - tinted_yellow (not implemented)
  # - grey (not implemented)

# Parameters for the bullet_holes damage type (note: num_holes may include 'holes' that missed the sign)
bullet_holes:
  min_holes: 7  # Not relevant if target != -1
  max_holes: 30  # Not relevant if target != -1
  target: -1   # The target level of damage, either -1 or in range (0.0,1.0), <= 0.50 is recommended

# Parameters for the graffiti damage type, each in range (0.0,1.0], recommended to be in increments of 0.1
graffiti:
  initial: 0.2  # First target level of damage
  final: 0.6    # Level of damage to stop at

# Randomization seed
# seed: 457   # For Training
seed: 500     # For Eval

# Parameters for the bend damage type
bend:
  max_axis: 60   # Clockwise rotation of the bending axis (in x-y plane)
  max_bend: 60   # Level of bending performed (from 0 to 90 degrees)
  beta_diff: 0     # Beta difference between bent and unbent portions of sign

# Prunes the dataset by using a maximum of n images for each 
# background+class+damage combination, selected randomly.
prune_dataset:
  prune: True
  max_images: 6

# Paramaters defining the annotation type, and whether damage labelling is used
annotations:
  type: 'coco'
  damage_labelling: True

# Number of sectors on each sign, over which damage is calculated
num_damage_sectors: 4
# use structural similarity (ssim) or pixel-wise obscurity (pixel_wise) to calculate sign damage
damage_measure_method: 'pixel_wise'     

# A setting that uses an algorithm to find the light source locations and intensities
# in each background image, and adjusts relative exposure between bent and unbent portions of
# a sign to mimic a shadow. Turn off until manipulate stops saturating images.
detect_light_src: False

# Whether to reuse .npy file in the 'damage' or 'manipulate' intermediate folders.
reuse_data: 
  damage: False
  manipulate: False