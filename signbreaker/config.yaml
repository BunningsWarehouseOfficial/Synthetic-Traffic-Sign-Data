# The width of the square to which sign images will be scaled
sign_width: 200  # Default: 200

# When to stop the program, in the case that not all of the sequential steps are required
final_op: dataset  # Either 'process', 'damage', 'transform', 'manipulate', or 'dataset'

# The number of transformations applied to each damaged sign template
num_transform: 6  # Range: [0,15] | low: [1,5], medium: [6,10], high: [11,15]

# Method of image manipulation: either 'exposure', 'gamma', 'gamma_exposure', or 'histogram' (somewhat broken)
man_method: gamma_exposure

# The number of damages applied via each method
num_damages: 
  original: 1       # Max 1
  quadrant: 1       # Max 4
  big_hole: 1
  bullet_holes: 1
  graffiti: 2
  bend: 2
  # - tinted_yellow (not implemented)
  # - grey (not implemented)

# Parameters for the bullet_holes damage type (note: num_holes may include 'holes' that missed the sign)
bullet_holes:
  min_holes: 7  # Not relevant if target != -1
  max_holes: 30  # Not relevant if target != -1
  target: -1   # The target level of damage, either -1 or in range (0.0,1.0), <= 0.50 is recommended

# Parameters for the graffiti damage type, each in range (0.0,1.0]
graffiti:  # The step size of intermediate damage levels is determined by num_damages above
  initial: 0.2  # First target level of damage
  final: 0.6    # Level of damage to stop at
  solid: True   # Whether or not transparency is minimised through only alpha values of 255 and morphological dilation

# Randomization seed
# seed: 457   # For Training
seed: 500     # For Eval

# Parameters for the bend damage type
bend:  # Bend may randomly be either a single-sided or double-sided bend
  max_axis: 60   # Clockwise rotation of the bending axis (in x-y plane)
  max_bend: 60   # Level of bending performed (from 0 to 90 degrees)

# Prunes the dataset by using a maximum of n images for each
# background+class+damage combination, selected randomly.
# In other words, how many images of the same sign class with the same damage
# but varying shading and angle do you want over the same background image?
prune_dataset:
  prune: True
  max_images: 6

# Paramaters defining the annotation type, and whether damage labelling is used
annotations:
  type: 'coco'  # Either 'retinanet' or 'coco'
  damage_labelling: True

# Number of grid cell sectors on each sign, over which damage is calculated
num_damage_sectors: 4  # Must be a perfect square
# 'ssim' will calculate structural difference relative to all pixels in each image/sector
#      This means damage values will be dependent on the shape of the sign
# 'pixel_wise' will calculate the pixel-by-pixel difference only for pixels part of the original sign (i.e. visible)
damage_measure_method: 'pixel_wise'

# A setting that uses an algorithm to find the light source locations and intensities
# in each background image, and adjusts relative exposure between bent and unbent portions of
# a sign to mimic a shadow. Does not work with saturating manipulation methods (i.e. 'exposure').
detect_light_src: True

# Whether to reuse .npy file in the 'damage' or 'manipulate' intermediate folders.
reuse_data: 
  damage: False
  manipulate: False